修改libevent（R1: Setting up the Libevent library）
{
	1.可修改log函数 void event_set_log_callback(event_log_cb cb);
	2.可修改致命错误处理函数  void event_set_fatal_callback(event_fatal_cb cb);
	3.可修改内存分配函数 void event_set_mem_functions(void *(*malloc_fn)(size_t sz),
								 void *(*realloc_fn)(void *ptr, size_t sz),
								 void (*free_fn)(void *ptr));
	4.可增加线程锁
	5.可控制debug
}



libevent的event_base初始化以及配置的设置（R2: Getting an event_base）
{
	struct event_base *event_base_new(void);
	struct event_config *event_config_new(void);
	struct event_base *event_base_new_with_config(const struct event_config *cfg);
	void event_config_free(struct event_config *cfg);
	void event_base_free(struct event_base *base);
	其他设置配置的方法{
		int event_config_avoid_method(struct event_config *cfg, const char *method);
		int event_config_require_features(struct event_config *cfg,
                                  enum event_method_feature feature);
		int event_config_set_flag(struct event_config *cfg,
								enum event_base_config_flag flag);
		int event_config_set_num_cpus_hint(struct event_config *cfg, int cpus)			
		int event_config_set_max_dispatch_interval(struct event_config *cfg,
			const struct timeval *max_interval, int max_callbacks,
			int min_priority);
	}
		
	const char **event_get_supported_methods(void);//获取系统支持的事件模型
	const char *event_base_get_method(const struct event_base *base);//获取使用的事件模型
	enum event_method_feature event_base_get_features(const struct event_base *base);
	
	Reinitializing an event_base after fork()
	int event_reinit(struct event_base *base);
}



R3: Running an event loop{
	//开始loop
	Once you have an event_base with some events registered , you will want Libevent to wait for events and alert you about them.
		#define EVLOOP_ONCE             0x01	//
		#define EVLOOP_NONBLOCK         0x02
		#define EVLOOP_NO_EXIT_ON_EMPTY 0x04	//即使没有等待事件和active事件也不退出。
		int event_base_loop(struct event_base *base, int flags);
	note：By default, the event_base_loop() function runs an event_base until there are no more events registered in it.
	note：Ordinarily, the loop will exit as soon as it has no pending or active events. You can override this behavior by passing the EVLOOP_NO_EXIT_ON_EMPTY flag---for example, if you’re going to be adding events from some other thread. If you do set EVLOOP_NO_EXIT_ON_EMPTY, the loop will keep running until somebody calls event_base_loopbreak(), or calls event_base_loopexit(), or an error occurs.
	
	
	int event_base_dispatch(struct event_base *base);//没有等待事件和active事件，将退出。
	The event_base_dispatch() call is the same as event_base_loop(), with no flags set. Thus, it keeps running until there are no more registered events or until event_base_loopbreak() or event_base_loopexit() is called.
	
	//停止loop
	int event_base_loopexit(struct event_base *base,
                        const struct timeval *tv);
	int event_base_loopbreak(struct event_base *base);
	
	//检查上次loop退出的原因
	int event_base_got_exit(struct event_base *base);
	int event_base_got_break(struct event_base *base);
	These two functions will return true if the loop was stopped with event_base_loopexit() or event_base_break() respectively, and false otherwise. Their values will be reset the next time you start the event loop.
	
	//暂停后继续loop
	int event_base_loopcontinue(struct event_base *);
	
	typedef int (*event_base_foreach_event_cb)(const struct event_base *,
    const struct event *, void *);
	
	//每一个事件都会调用它
	int event_base_foreach_event(struct event_base *base,
								 event_base_foreach_event_cb fn,
								 void *arg);
	You can use event_base_foreach_event() to iterate over every currently active or pending event associated with an event_base().
	}


R4: Working with events{
	Libevent’s basic unit of operation is the event. Every event represents a set of conditions, including:
	A file descriptor being ready to read from or write to.
	A file descriptor becoming ready to read from or write to (Edge-triggered IO only).
	A timeout expiring.
	A signal occurring.
	A user-triggered event.

	Events have similar lifecycles. Once you call a Libevent function to set up an event and associate it with an event base, it becomes initialized. At this point, you can add, which makes it pending in the base. When the event is pending, if the conditions that would trigger an event occur (e.g., its file descriptor changes state or its timeout expires), the event becomes active, and its (user-provided) callback function is run. If the event is configured persistent, it remains pending. If it is not persistent, it stops being pending when its callback runs. You can make a pending event non-pending by deleting it, and you can add a non-pending event to make it pending again.
	Constructing event objects
	To create a new event, use the event_new() interface.

	Interface
	#define EV_TIMEOUT      0x01
	#define EV_READ         0x02
	#define EV_WRITE        0x04
	#define EV_SIGNAL       0x08
	#define EV_PERSIST      0x10
	#define EV_ET           0x20
	
	typedef void (*event_callback_fn)(evutil_socket_t, short, void *);
	struct event *event_new(struct event_base *base, evutil_socket_t fd,
		short what, event_callback_fn cb,
		void *arg);
		
	void event_free(struct event *event);
	To deallocate an event, call event_free(). It is safe to call event_free() on an event that is pending or active: doing so makes the event non-pending and inactive before deallocating it.

	//关于事件的持续循环
	About Event Persistence
	By default, whenever a pending event becomes active (because its fd is ready to read or write, or because its timeout expires), it becomes non-pending right before its callback is executed. Thus, if you want to make the event pending again, you can call event_add() on it again from inside the callback function.
	If the EV_PERSIST flag is set on an event, however, the event is persistent. This means that event remains pending even when its callback is activated. If you want to make it non-pending from within its callback, you can call event_del() on it.
	The timeout on a persistent event resets whenever the event’s callback runs. Thus, if you have an event with flags EV_READ|EV_PERSIST and a timeout of five seconds, the event will become active:
	Whenever the socket is ready for reading.
	Whenever five seconds have passed since the event last became active.
	
	
	
	1.Creating an event as its own callback argument
	void *event_self_cbarg();
	ev = event_new(base, -1, EV_PERSIST, cb_func, event_self_cbarg())
	把自身传到回调函数里去（可以用&ev替代）
	
	
	
	2.超时事件
	Timeout-only events
	As a convenience, there are a set of macros beginning with evtimer_ that you can use in place of the event_* calls to allocate and manipulate pure-timeout events. Using these macros provides no benefit beyond improving the clarity of your code.
	Interface
	#define evtimer_new(base, callback, arg) \
		event_new((base), -1, 0, (callback), (arg))
	#define evtimer_add(ev, tv) \
		event_add((ev),(tv))
	#define evtimer_del(ev) \
		event_del(ev)
	#define evtimer_pending(ev, tv_out) \
		event_pending((ev), EV_TIMEOUT, (tv_out))
		
		
		
	3.信号事件
	#define evsignal_new(base, signum, cb, arg) \
    event_new(base, signum, EV_SIGNAL|EV_PERSIST, cb, arg)
	The arguments are as for event_new, except that we provide a signal number instead of a file descriptor.
	
	Warning：Don’t set a timeout on a signal event. It might not be supported.
	Interface
	#define evsignal_add(ev, tv) \
		event_add((ev),(tv))
	#define evsignal_del(ev) \
		event_del(ev)
	#define evsignal_pending(ev, what, tv_out) \
		event_pending((ev), (what), (tv_out))
		
		
		
	3.不new struct event，而是initialize stack-allocated or statically allocated events.
	int event_assign(struct event *event, struct event_base *base,
			evutil_socket_t fd, short what,
			void (*callback)(evutil_socket_t, short, void *), void *arg);
	You can also use event_assign() to initialize stack-allocated or statically allocated events.
	WARNING：（不能给已经在事件上的event调用此函数）
	Never call event_assign() on an event that is already pending in an event base. Doing so can lead to extremely hard-to-diagnose errors. If the event is already initialized and pending, call event_del() on it before you call event_assign() on it again.
	
	Interface
	#define evtimer_assign(event, base, callback, arg) \
		event_assign(event, base, -1, 0, callback, arg)
	#define evsignal_assign(event, base, signum, callback, arg) \
		event_assign(event, base, signum, EV_SIGNAL|EV_PERSIST, callback, arg)
	
	
	
	4.获取struct event结构体的大小
	If you need to use event_assign() and retain binary compatibility with future versions of Libevent, you can ask the Libevent library to tell you at runtime how large a struct event should be:
	Interface
	size_t event_get_struct_event_size(void);
	
	
	
	5.Making events pending and non-pending
		int event_add(struct event *ev, const struct timeval *tv);
		int event_del(struct event *ev);
		int event_remove_timer(struct event *ev);
		
	6.设置event的优先级
		int event_priority_set(struct event *event, int priority);
		
	7.检测某一事件的当前状态
		int event_pending(const struct event *ev, short what, struct timeval *tv_out);判断ev的event事件是否正在处理。

		#define event_get_signal(ev) /* ... */
		evutil_socket_t event_get_fd(const struct event *ev);
		struct event_base *event_get_base(const struct event *ev);
		short event_get_events(const struct event *ev);
		event_callback_fn event_get_callback(const struct event *ev);
		void *event_get_callback_arg(const struct event *ev);
		int event_get_priority(const struct event *ev);

		void event_get_assignment(const struct event *event,
				struct event_base **base_out,
				evutil_socket_t *fd_out,
				short *events_out,
				event_callback_fn *callback_out,
				void **arg_out);
				
	
	8.Finding the currently running event
		struct event *event_base_get_running_event(struct event_base *base);
		
	9.Configuring one-off events
		If you don’t need to add an event more than once, or delete it once it has been added, and it doesn’t have to be persistent, you can use event_base_once().
	int event_base_once(struct event_base *, evutil_socket_t, short,
	  void (*)(evutil_socket_t, short, void *), void *, const struct timeval *);
	  
	This function’s interface is the same as event_new(), except that it does not support EV_SIGNAL or EV_PERSIST.
	
	手动激活事件
	Rarely, you may want to make an event active even though its conditions have not triggered.
	Interface
	void event_active(struct event *ev, int what, short ncalls);
	
	判断ev是否初始化了。
	int event_initialized(const struct event *ev);
	#define evsignal_initialized(ev) event_initialized(ev)
	#define evtimer_initialized(ev) event_initialized(ev)
	
	
	一些久接口:
	void event_set(struct event *event, evutil_socket_t fd, short what,
        void(*callback)(evutil_socket_t, short, void *), void *arg);
	int event_base_set(struct event_base *base, struct event *event);
	}	

	
R5: Utility and portability functions
{
	evutil_socket_t:
	#ifdef WIN32
	#define evutil_socket_t intptr_t
	#else
	#define evutil_socket_t int
	#endif

	#define evutil_timeradd(tvp, uvp, vvp) /* ... */
	#define evutil_timersub(tvp, uvp, vvp) /* ... */

	#define evutil_timerclear(tvp) /* ... */
	#define evutil_timerisset(tvp) /* ... */

	#define evutil_timercmp(tvp, uvp, cmp)
	int evutil_gettimeofday(struct timeval *tv, struct timezone *tz);

	Example
	struct timeval tv1, tv2, tv3;

	/* Set tv1 = 5.5 seconds */
	tv1.tv_sec = 5; tv1.tv_usec = 500*1000;

	/* Set tv2 = now */
	evutil_gettimeofday(&tv2, NULL);

	/* Set tv3 = 5.5 seconds in the future */
	evutil_timeradd(&tv1, &tv2, &tv3);

	/* all 3 should print true */
	if (evutil_timercmp(&tv1, &tv1, ==))  /* == "If tv1 == tv1" */
	   puts("5.5 sec == 5.5 sec");
	if (evutil_timercmp(&tv3, &tv2, >=))  /* == "If tv3 >= tv2" */
	   puts("The future is after the present.");
	if (evutil_timercmp(&tv1, &tv2, <))   /* == "If tv1 < tv2" */
	   puts("It is no longer the past.");
	   
	   
	int evutil_closesocket(evutil_socket_t s);
	int evutil_make_socket_nonblocking(evutil_socket_t sock);
	int evutil_make_listen_socket_reuseable(evutil_socket_t sock);
	int evutil_make_socket_closeonexec(evutil_socket_t sock);

	int evutil_snprintf(char *buf, size_t buflen, const char *format, ...);
	int evutil_vsnprintf(char *buf, size_t buflen, const char *format, va_list ap);

	int evutil_ascii_strcasecmp(const char *str1, const char *str2);
	int evutil_ascii_strncasecmp(const char *str1, const char *str2, size_t n);

	const char *evutil_inet_ntop(int af, const void *src, char *dst, size_t len);
	int evutil_inet_pton(int af, const char *src, void *dst);
}

R6: Bufferevents: concepts and basics
{

}








