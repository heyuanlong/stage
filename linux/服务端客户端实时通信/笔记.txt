192.168.8.4 heyuanlong FDSA@#FDF


SetSocketNonblock(STDIN_FILENO);///非阻塞读取终端数据
SetSocketNonblock(clientsocket);//为什么放在connect之前就会出错？？？？？？？？？？？

 int val=1;//设为可重用，要放在bind之前
int ss=setsockopt(serversocket,SOL_SOCKET,SO_REUSEADDR,(const void*)&val,sizeof(int));

EventTemp.events=EPOLLIN | EPOLLOUT;//  ||这里得非边缘触发才可以不断发生EPOLLOUT？ 否则只发生一个EPOLLOUT事件

一个信号函数未返回，则后来的同一信号将无效。


char sendbuf[SENDBUFSIZE];
char  *temp =sendbuf;
temp +=sendnum;//sendbuf +=sendnum;是不可以的


(gdb) set buf="777777777777777777777777777777"
(gdb) set len =10


对一个对端已经关闭的socket调用两次write, 第二次将会生成SIGPIPE信号, 该信号默认结束进程.
具体的分析可以结合TCP的”四次握手”关闭. TCP是全双工的信道, 可以看作两条单工信道, TCP连接两端的两个端点各负责一条. 当对端调用close时, 虽然本意是关闭整个两条信道, 但本端只是收到FIN包. 按照TCP协议的语义, 表示对端只是关闭了其所负责的那一条单工信道, 仍然可以继续接收数据. 也就是说, 因为TCP协议的限制, 一个端点无法获知对端已经完全关闭.









以上解释了测试1，2的现象,write一个已经接受到RST的socket，系统内核会发送SIGPIPE给发送进程，如果进程catch/ignore这个信号，write都返回EPIPE错误.

因此,UNP建议应用根据需要处理SIGPIPE信号，至少不要用系统缺省的处理方式处理这个信号，系统缺省的处理方式是退出进程，这样你的应用就很难查处处理进程为什么退出。

对一个已经收到FIN包的socket调用read方法, 如果接收缓冲已空, 则返回0, 
这就是常说的表示连接关闭. 但第一次对其调用write方法时, 如果发送缓冲没问题, 
会返回正确写入(发送). 但发送的报文会导致对端发送RST报文, 
因为对端的socket已经调用了close, 完全关闭, 既不发送, 也不接收数据. 所以, 
第二次调用write方法(假设在收到RST之后), 会生成SIGPIPE信号, 导致进程退出.
为了避免进程退出, 可以捕获SIGPIPE信号, 或者忽略它, 
给它设置SIG_IGN信号处理函数:
signal(SIGPIPE, SIG_IGN);

（第一次write是没什么错误现象出现的）
这样, 第二次调用write方法时, 会返回-1, 同时errno置为SIGPIPE. 
程序便能知道对端已经关闭.



in et  有了后直到读完才go
in lt  有就一直go





