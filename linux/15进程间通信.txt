int pipe(int pipefd[2]);//无名管道，用于父子进程间通信

FILE *popen(const char *command, const char *type);//只改变command程序的单个管道
int pclose(FILE *stream);
fpin=popen(arv[1],"r");
fpout=popen(PAGER,"W");

注意：popen只提供连接到另一个进程的标准输入或者标准输出的一个的单向管道，而对于协同进程，则它有连接到另外一个进程的两个单向管道――――一个接到其标准输出、一个连接到其标准输入，经过其处理后，再从标准输出读取数据。


FIFO (命名管道，可用于不相关的进程)
int mkfifo(const char *pathname, mode_t mode);

有3种称作XSI IPC的IPC，消息队列，信号量，共享存储器
1.IPC在系统范围内起作用
2.IPC不使用文件描述符（所以不能用上事件模型）



key_t ftok(const char *pathname, int proj_id);


消息队列
{
	int msgget(key_t key, int msgflg);
	int msgctl(int msqid, int cmd, struct msqid_ds *buf);
	int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
	ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,int msgflg);
}

XSI信号量
{
	int semget(key_t key, int nsems, int semflg);
	int semctl(int semid, int semnum, int cmd, ...);
	int semop(int semid, struct sembuf *sops, unsigned nsops);
	int semtimedop(int semid, struct sembuf *sops, unsigned nsops,struct timespec *timeout);
}

共享存储器（最快的IPC）
{
	int shmget(key_t key, size_t size, int shmflg);
	int shmctl(int shmid, int cmd, struct shmid_ds *buf);
	void *shmat(int shmid, const void *shmaddr, int shmflg);
	int shmdt(const void *shmaddr);
}

POSIX信号量
{
	命名
	{
		sem_t *sem_open(const char *name, int oflag);
		int sem_close(sem_t *sem);
		int sem_unlink(const char *name);
	}
	未命名
	{
		int sem_init(sem_t *sem, int pshared, unsigned int value);
		int sem_destroy(sem_t *sem);
	}
	公用函数
	{
	       int sem_wait(sem_t *sem);
	       int sem_trywait(sem_t *sem);
	       int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
	       int sem_post(sem_t *sem);

	}
}


进程间同步
{
XSI信号量
POSIC信号量
文件记录锁
共享存储中的互斥量（最快）
}

进程间数据来往
{
pipe（父子进程）
FIFO
消息队列
共享存储器
}



