#define SIG_ERR (void (*)())-1
#define SIG_DEL (void (*)())0
#define SIG_IGN (void (*)())1


void (*signal(int signo,void (*func)(int)))(int)
kill (信号码) (进程id) //向进程发送信号

阻塞或非阻塞下，大多数UNIX并不对信号排队。

int kill(pid_t pid ,int singo);
int raise(int singo);
unsigned int alarm(unsigned int seconds);
int pause(void);

int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int signum);
int sigdelset(sigset_t *set, int signum);
int sigismember(const sigset_t *set, int signum);//判断某个信号是否在信号集里

int sigprocmask(int how,const sigset_t *set,sigset_t *oldset);
how意味：
SIG_BLOCK并集
SIG_UNBLOCK删除
SIG_SETMASK指定

int sigpending(sigset_t *set)//获取进程里的信号集


int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact);
struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };

/*自定义信号处理函数*/
void my_func(int sign_no)
{
	if (sign_no == SIGINT)
	{
		printf("I have get SIGINT\n");
	}	
  	else if (sign_no == SIGQUIT)
  	{
  		printf("I have get SIGQUIT\n");
  	}
}

int main()
{
	struct sigaction action;
	printf("Waiting for signal SIGINT or SIGQUIT...\n");
	
	/* sigaction结构初始化 */
	action.sa_handler = my_func;
	sigemptyset(&action.sa_mask);//不屏蔽任何信号
	action.sa_flags = 0;
	
	/* 如果发出相应的信号，并跳转到信号处理函数处 */
	sigaction(SIGINT, &action, 0);//,设置信号相对应的函数
	sigaction(SIGQUIT, &action, 0);//,设置信号相对应的函数

	//raise(SIGINT);//也可以使用ctrl + c 触发信号
	//raise(SIGQUIT);//也可以使用ctrl + \ 触发此信号
	pause();
	exit(0);
}


int sigsetjmp(sigjmp_buf env, int savesigs);
	sigsetjmp() is similar to setjmp().  If, and only if, savesigs is non-zero, the process’s current signal mask is saved in env and will be restored if a siglongjmp(3) is later performed with this env.
void siglongjmp(sigjmp_buf env, int val);
	siglongjmp() is similar to longjmp() except for the type of its env argument.  If, and only if, the sigsetjmp(3) call  that  set  this env used a non-zero savesigs flag, siglongjmp() also restores the signal mask that was saved by sigsetjmp(3).

int sigsuspend(const sigset_t *mask);
设置信号屏蔽字为mask，然后睡眠直到有其他信号来，屏蔽字也会恢复sigsuspend之前的。
void abort(void);使程序异常终止
 int system(const char *command);//system("/bin/ed");

unsigned int sleep(unsigned int seconds);//时间到会从信号处理中返回
int nanosleep(const struct timespec *req, struct timespec *rem);//更加精确，并且能得到未休眠完的时间。
int sigqueue(pid_t pid, int sig, const union sigval value);//实现信号排队


信号编号和信号名映射的全局变量 extern char * sys_siglist[];
















