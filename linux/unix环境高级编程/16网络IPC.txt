int socket(int domain, int type, int protocol);
domain：
	AF_UNIX, AF_LOCAL   Local communication              unix(7)
	AF_INET             IPv4 Internet protocols          ip(7)
	AF_INET6            IPv6 Internet protocols          ipv6(7)
types：
	SOCK_STREAM 
	SOCK_DGRAM 
	SOCK_NONBLOCK   Set  the  O_NONBLOCK file status flag on the new open file description.  Using this flag saves extra calls to fcntl(2)
			       to achieve the same result.
	SOCK_CLOEXEC    Set the close-on-exec (FD_CLOEXEC) flag on the new file descriptor.  See the description  of  the  O_CLOEXEC  flag  in
			       open(2) for reasons why this may be useful.


int shutdown(int sockfd, int how);

DESCRIPTION
The  shutdown()  call  causes  all  or part of a full-duplex connection on the socket associated with sockfd to be shut down.  
If how is SHUT_RD, further receptions will be disallowed.  
If how is SHUT_WR, further transmissions will be disallowed.  
If how is SHUT_RDWR, further receptions and transmissions will be disallowed.


#include<arpa/inet.h>
uint32_t htonl(uint32_t hostlong);
uint16_t htons(uint16_t hostshort);
uint32_t ntohl(uint32_t netlong);
uint16_t ntohs(uint16_t netshort);




通用socket地址

#include <bits/socket.h>
Struct sockaddr
{
        Sa_family_tsa_family;
        charsa_data[14];
};
//----------------------------------------
TCP/IP协议族有sockaddr_in和sockaddr_in6两个专用socket地址结构体，他们分别用于IPv4和IPv6:
struct sockaddr_in
{
        sa_family_tsin_family;            //地址族：AF_INET
        u_int16_tsin_port;                   //端口号，要用网络字节序表示
        structin_addr sin_addr;          //IPv4地址结构体
};
Struct in_addr
{
        u_int32_t s_addr;                     //IPv4地址，要用网络字节序表示
};
//----------------------------------------
Struct sockaddr_in6
{
        sa_family_tsin6_family;         //地址族：AF_INET6
        u_int16_tsin6_port;                //端口号，要用网路字节序表示
        u_int32_tsin6_flowinfo;//流信息，应设置为0
        structin6_addr;                         //IPv6地址结构体
        u_int32_tsin6_scope_id;        //scope ID,尚处实验阶段
};
Struct in6_addr
{
        Unsignedchar sa_addr[16];   //IPv6地址，要用网络字节序表示
};
//----------------------------------------


int inet_aton(const char *cp, structin_addr *inp);        //将点分十进制转化为网络字节序
in_addr_t inet_addr(const char *cp);     //同上，但将结果放入cp所指地址
char *inet_ntoa(struct in_addr in);                  //将网络字节序转化为点分十进制
上面三个函数用于点分十进制字符串表示的IPv4地址和用网络字节序整数（二进制数）表示的IPv4地址之间的转换。


下面这对函数也能完成上面3个函数的功能
#include <arpa/inet.h>
int inet_pton(int af, const char *src, void*dst);
const char *inet_ntop(int af, const void*src, char *dst, socklen_t size);



int socket(int domain, int type, intprotocol);         //创建socket，指定协议族和服务类型
int bind(int sockfd, const struct sockaddr*addr, socklen_t addrlen);   //绑定地址
int listen(int sockfd, int backlog);   //服务器创建监听队列以存放处理的客户连接
int accept(int sockfd, struct sockaddr*addr, socklen_t *addrlen);/从监听队列接收一个连接
int connect(int sockfd, const structsockaddr *addr, socklen_t addrlen);//客户与服务器建立连接
int close(int fd);       //关闭连接



ssize_t recv(int sockfd, void *buf, size_tlen, int flags);
ssize_t recvfrom(int sockfd, void *buf,size_t len, int flags,struct sockaddr *src_addr, socklen_t *addrlen);
ssize_t recvmsg(int sockfd, struct msghdr*msg, int flags);
 
ssize_t send(int sockfd, const void *buf,size_t len, int flags);
ssize_t sendto(int sockfd, const void *buf,size_t len, int flags,const struct sockaddr*dest_addr, socklen_t addrlen);
ssize_t sendmsg(int sockfd, const structmsghdr *msg, int flags);


int getsockname(int sockfd, struct sockaddr*addr, socklen_t *addrlen);    //获取本端sockfd对应的本端socket地址
int getpeername(int sockfd, struct sockaddr*addr, socklen_t *addrlen);    //获取sockfd对应的远端socket地址


读取和设置socket文件描述符属性的方法
int getsockopt(int sockfd, int level, intoptname, void *optval, socklen_t *optlen);      
int setsockopt(int sockfd, int level, intoptname, const void *optval, socklen_t optlen);


根据主机名称获取主机的完整信息和根据IP地址获取主机的完整信息
#include <netdb.h>
struct hostent *gethostbyname(const char*name);
#include <sys/socket.h>      /* for AF_INET */
struct hostent *gethostbyaddr(const void*addr, socklen_t len, int type);


获取某个服务的完整信息和根据端口获取某个服务的完整信息
#include <netdb.h>
struct servent *getservbyname(const char*name, const char *proto);
struct servent *getservbyport(int port,const char *proto);


通过主机名获得IP地址，也能通过服务器获得端口号。
#include <netdb.h>
int getaddrinfo(const char *node, constchar *service, const struct addrinfo *hints,struct addrinfo **res);


通过socket地址同时获得以字符串标书的主机名和服务名。
#include <netdb.h>
int getnameinfo(const struct sockaddr *sa,socklen_t salen, char *host, size_t hostlen,char *serv, size_tservlen, int flags);


