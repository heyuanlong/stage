makefile真奇怪，有一处错了，那么整个文件就可能报废了。
-fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，

http://www.cnblogs.com/tianyajuanke/archive/2013/02/16/2610276.html



CFLAGS= -g -O3 `pkg-config opencv --cflags`  
LIBS = `pkg-config opencv --libs`  
C_SRC = $(wildcard *.c)  
C_OBJ = $(patsubst %c, %o, $(C_SRC))  
CPP_SRC = $(wildcard *.cpp)  
CPP_OBJ = $(patsubst %cpp, %o, $(CPP_SRC))  
  
.PHONY:all clean  
all:$(CPP_OBJ) $(C_OBJ)  
.c.o:  
    gcc $(CFLAGS) -o $@ $< $(LIBS)   
.cpp.o:  
    g++ $(CFLAGS) -o $@ $< $(LIBS)  
  
clean:  
    rm *~ *.o -f 

1.
c_src和c_obj中，$(wildcard *.c, *.cpp, /***/***/*.c)是为了找出目录和指定目录下所有的后缀为c和cpp的文件
2.
$(patsubst %cpp, %o, $(CPP_SRC))中是为了将CPP_SRC的所有的cpp文件的后缀替换为o文件，这个功能也可以通过CPP_OBJ=$(CPP_SRC:%.c=%.o)实现


Makfile相关函数说明：
1、wildcard : 扩展通配符
2、notdir ： 去除路径
3、patsubst ：替换通配符

src=$(wildcard *.c ./sub/*.c)
dir=$(notdir $(src))				
obj=$(patsubst %.c,%.o,$(dir) )																				






///------------------------------------------
一个例子：
DIR=src/battle src/conn src/core src/http src/include src/inner src/os src/service src/third-party src/third-party/json
SRC=$(foreach dir, $(DIR), $(wildcard $(dir)/*.cpp))
OBJDIR=./obj
SRCNAME=$(notdir $(SRC))
OBJ=$(patsubst %.cpp, $(OBJDIR)/%.obj, $(SRCNAME))
INC=$(foreach dir, $(DIR), -I $(dir)/) 
LIB=-L/usr/local/lib -lpthread -levent -levent_core

DESLIB=./build/libmatchvs.so
CC=g++ -g -w

all: ctrl $(DESLIB)

$(DESLIB):$(OBJ)
		$(CC) -shared -fPIC -o $@ $^ $(LIB)

$(OBJDIR)/%.obj:$(OBJDIR)/%.cpp
		$(CC) $(INC)  -shared -fPIC -c $< -o $@  

ctrl:
	rsync -avzP $(SRC) $(OBJDIR)
	
clean:
	rm ./obj/* -f
///------------------------------------------